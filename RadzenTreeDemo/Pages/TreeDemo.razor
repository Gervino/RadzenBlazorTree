@page "/tree"
@using Radzen
@using RadzenTreeDemo.Data
@using System.IO
@inject ProductService productService
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment HostEnvironment


<h3>TreeDemo - Radzen Blazor Tree Part - 1 &Aacute; 2 (A revoir!!!)</h3>
<div class="row">
    <div class="col-md-6">
        <h3>Load Tree with Static Data</h3>
        <RadzenTree Expand="@LogExpand" Change="@LogChange" Style="width:100%">
            <RadzenTreeItem Text="Product-1">
                <RadzenTreeItem Text="Item-1" />
                <RadzenTreeItem Text="Item-1" />
            </RadzenTreeItem>

            <RadzenTreeItem Text="Product-2">
                <RadzenTreeItem Text="Item-2" />
                <RadzenTreeItem Text="Item-2" />
            </RadzenTreeItem>

            <RadzenTreeItem Text="Product-3">
                <RadzenTreeItem Text="Item-3" />
                <RadzenTreeItem Text="Item-3" />
            </RadzenTreeItem>

            <RadzenTreeItem Text="Product-4">
                <RadzenTreeItem Text="Item-4" />
                <RadzenTreeItem Text="Item-4" />
            </RadzenTreeItem>
        </RadzenTree>
    </div>

    <div class="col-md-6">
        <h3>Load Tree with Remote Data</h3>
        <RadzenTree Expand="@LogExpand" Change="@LogChange" Data="@categories" Style="width:100%">
            <RadzenTreeLevel TextProperty="CategoryName" ChildrenProperty="Products">
                <Template>
                    <strong>@((context.Value as Category).CategoryName)</strong>
                </Template>
            </RadzenTreeLevel>
            <RadzenTreeLevel TextProperty="ProductName" HasChildren="@((product)=> false)" />
        </RadzenTree>
    </div>

    <div class="col-md-6">
        <h3>Files and Directories</h3>
        <RadzenTree Expand="@LoadFiles" Change="@LogChange" Data="@entries" Style="width:100%">
            <RadzenTreeLevel Text="@GetTextForNode"></RadzenTreeLevel>
        </RadzenTree>
    </div>
</div>

<div class="row">
    <div class="col-md-6">
        <h3>Event</h3>
        <RadzenCard Style="overflow:auto;height:500px;">
            @foreach (var e in events.OrderByDescending(i => i.Key))
             {
                @e.Value
                <br />
             }
        </RadzenCard>
    </div>
</div>

@code {
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();
    IEnumerable<string> entries = null;

    void Log(string eventName, string value)
    {
        events.Add(DateTime.Now, $"{eventName}:{value}");
    }

    void LogChange(TreeEventArgs args)
    {
        Log("Change", $"Item Text:{args.Text}");
    }

    void LogExpand(TreeExpandEventArgs args)
    {
        if (args.Value is string text)
        {
            Log("Expand", $"Text:{text}");
        }
    }

    IEnumerable<Category> categories;
    protected override async Task OnInitializedAsync()
    {
        categories = await Task.Run(() => productService.CategoryList() );
    }

    //For Directory Browsing
    protected override void OnInitialized()
    {
        entries = Directory.GetDirectories(HostEnvironment.ContentRootPath)
            .Where(entry => {
                var name = Path.GetFileName(entry);
                return !name.StartsWith(".") && name != "bin" && name != "obj";
            });
    }

    void LoadFiles(TreeExpandEventArgs args)
    {
        var directory = args.Value as string;
        args.Children.Data = Directory.EnumerateFileSystemEntries(directory);
        args.Children.Text = GetTextForNode;
        args.Children.HasChildren = (path) => Directory.Exists((string)path);

        Log("Expand", $"Text:{args.Text}");
    }

    string GetTextForNode(object data)
    {
        return Path.GetFileName((string)data);
    }
}
